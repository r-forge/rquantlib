
R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> stopifnot(require(RQuantLib))
> 
> ## values from Quantlib's test-suite
> ## Reference: Haug, Option Pricing Formulas, McGraw-Hill, 1998
> ##
> ## and generally sourced from the code in the test-suite/
> ## directory of the QuantLib distribution
> 
> ## europeanoption.cpp:  call value == 2.1334
> print(EuropeanOption("call", underlying=60, strike=65, div=0, riskFree=0.08,
+                      maturity=0.25, vol=0.3), digits=5)
Concise summary of valuation for EuropeanOption 
   value    delta    gamma     vega    theta      rho   divRho 
 2.13337  0.37248  0.04204 11.35154 -8.42817  5.05390 -5.58724 
> ## europeanoption.cpp:  put value == 2.4648
> print(EuropeanOption("put", underlying=100, strike=95, div=0.05, riskFree=0.1,
+                      maturity=0.5, vol=0.2), digits=5)
Concise summary of valuation for EuropeanOption 
    value     delta     gamma      vega     theta       rho    divRho 
  2.46479  -0.26418   0.02284  22.83957  -3.00053 -14.44147  13.20908 
> 
> ## europeanoption.cpp:  call delta == 0.5946
> print(EuropeanOption("call", underlying=105, strike=100,div=0.1,riskFree=0.1,
+                      maturity=0.5, vol=0.36), digits=4)
Concise summary of valuation for EuropeanOption 
   value    delta    gamma     vega    theta      rho   divRho 
 12.4328   0.5946   0.0135  26.7781  -8.3968  25.0016 -31.2180 
> ## europeanoption.cpp:  put delta == -0.3566
> print(EuropeanOption("put", underlying=105, strike=100,div=0.1,riskFree=0.1,
+                      maturity=0.5, vol=0.36), digits=4)
Concise summary of valuation for EuropeanOption 
   value    delta    gamma     vega    theta      rho   divRho 
  7.6767  -0.3566   0.0135  26.7781  -8.8725 -22.5599  18.7215 
> 
> ## europeanoption.cpp:  call gamma == 0.0278
> print(EuropeanOption("call", underlying=55, strike=60,div=0.0,riskFree=0.1,
+                      maturity=0.75, vol=0.30), digits=4)
Concise summary of valuation for EuropeanOption 
   value    delta    gamma     vega    theta      rho   divRho 
  5.3928   0.5333   0.0278  18.9358  -6.1813  17.9557 -22.0003 
> ## europeanoption.cpp:  put gamma == 0.0278
> print(EuropeanOption("put", underlying=55, strike=60,div=0.0,riskFree=0.1,
+                      maturity=0.75, vol=0.30), digits=4)
Concise summary of valuation for EuropeanOption 
   value    delta    gamma     vega    theta      rho   divRho 
  6.0574  -0.4667   0.0278  18.9358  -0.6148 -23.7927  19.2497 
> 
> ## europeanoption.cpp:  call vega == 18.9358
> print(EuropeanOption("call", underlying=55, strike=60,div=0.0,riskFree=0.1,
+                      maturity=0.75, vol=0.30), digits=4)
Concise summary of valuation for EuropeanOption 
   value    delta    gamma     vega    theta      rho   divRho 
  5.3928   0.5333   0.0278  18.9358  -6.1813  17.9557 -22.0003 
> ## europeanoption.cpp:  put vega == 18.9358
> print(EuropeanOption("put", underlying=55, strike=60,div=0.0,riskFree=0.1,
+                      maturity=0.75, vol=0.30), digits=4)
Concise summary of valuation for EuropeanOption 
   value    delta    gamma     vega    theta      rho   divRho 
  6.0574  -0.4667   0.0278  18.9358  -0.6148 -23.7927  19.2497 
> 
> 
> ## americanoption.cpp:  call value == 10.0089 -- we show 10.00606
> print(AmericanOption("call", underlying=110, strike=100, div=0.1, riskFree=0.1,
+                      maturity=0.1, vol=0.15), digits=5)
Concise summary of valuation for AmericanOption 
   value    delta    gamma     vega    theta      rho   divRho 
10.00606       NA       NA       NA       NA       NA       NA 
> ## americanoption.cpp:  put value == 0.3159
> print(AmericanOption("call", underlying=90, strike=100, div=0.1, riskFree=0.1,
+                      maturity=0.1, vol=0.25), digits=5)
Concise summary of valuation for AmericanOption 
 value  delta  gamma   vega  theta    rho divRho 
0.3159     NA     NA     NA     NA     NA     NA 
> 
> 
> ## barrier: down and out call == 9.0246
> print(BarrierOption("downout", barrier=95, rebate=3, type="call",
+                     strike=90, underlying=100, div=0.04, riskF=0.08,
+                     mat=0.5, vol=0.25), digits=4)
Concise summary of valuation for BarrierOption 
 value  delta  gamma   vega  theta    rho divRho 
9.0246    NaN    NaN    NaN    NaN    NaN    NaN 
> ## barrier: down and in call == 7.7627
> print(BarrierOption("downin", barrier=95, rebate=3, type="call",
+                     strike=90, underlying=100, div=0.04, riskF=0.08,
+                     mat=0.5, vol=0.25), digits=4)
Concise summary of valuation for BarrierOption 
 value  delta  gamma   vega  theta    rho divRho 
7.7627    NaN    NaN    NaN    NaN    NaN    NaN 
> 
> 
> ## binary aka digital: put == 2.6710
> print(BinaryOption(binType="cash", type="put", excType="european",
+                    strike=80, underl=100, div=0.06, r=0.06,
+                    mat=0.75, vol=0.35, cash=10), digits=4)
Concise summary of valuation for BinaryOption 
  value   delta   gamma    vega   theta     rho  divRho 
 2.6710 -0.1061  0.0031  8.1539 -1.7423 -9.9577  7.9545 
> 
> ## asianoption.cpp:  put == 4.6922 (from testAnalyticContinuousGeometricAveragePrice())
> print( AsianOption("geometric", "put", underlying=80, strike=85, div=-0.03, riskFree=0.05, maturity=0.25, vol=0.2))
Concise summary of valuation for AsianOption 
  value   delta   gamma    vega   theta     rho  divRho 
 4.6922 -0.8031  0.0594  6.8662  0.0580 -9.2039  8.0309 
> 
> # simple call with unnamed parameters
> 
> bond <- list(faceAmount=100,issueDate=as.Date("2004-11-30"),
+              maturityDate=as.Date("2008-11-30"), redemption=100 )
> 
> dateparams <-list(settlementDays=1, calendar="us", businessDayConvention='Unadjusted')
> 
> 
> discountCurve.param <- list(tradeDate=as.Date('2002-2-15'),
+                            settleDate=as.Date('2002-2-15'),
+                            dt=0.25,
+                            interpWhat='discount', interpHow='loglinear')
> discountCurve <- DiscountCurve(discountCurve.param, list(flat=0.05))
> 
> ZeroCouponBond(bond, discountCurve, dateparams)
Concise summary of valuation for ZeroCouponBond 
 Net present value :  71.21519 
       clean price :  81.884 
       dirty price :  81.884 
    accrued coupon :  0 
             yield :  0.050516 
        cash flows : 
       Date Amount
 2008-11-30    100
> 
> 
> ## bond.cpp: examples from Fixed Income page of Matlab
> ZeroYield(95, 100, as.Date("1993-6-24"), as.Date("1993-11-1"))
$yield
[1] 0.1477733

attr(,"class")
[1] "ZeroYield"
> 
> ## bond.cpp: test theoretical price of bond by its yield
> ZeroPriceByYield(0.1478, 100, as.Date("1993-6-24"), as.Date("1993-11-1"))
$cleanPrice
[1] 94.99914

attr(,"class")
[1] "ZeroPriceByYield"
> 
> ## bond.cpp: test theoretical yield of a fixed rate bond, = 0.0307
> FixedRateBondYield(,99.282, 100000, as.Date("2004-11-30"), as.Date("2008-11-30"), 3, , c(0.02875), , , , ,as.Date("2004-11-30"))
$yield
[1] 0.03066526

attr(,"class")
[1] "FixedRateBondYield"
> 
> ## bond.cpp: test theoretical price of a fixed rate bond  = 99.2708
> FixedRateBondPriceByYield(,0.0307, 100000, as.Date("2004-11-30"), as.Date("2008-11-30"), 3, , c(0.02875), , , , ,as.Date("2004-11-30"))
$cleanPrice
[1] 99.26903

attr(,"class")
[1] "FixedRateBondPriceByYield"
> 
> ## bond.cpp
> bond <- list(faceAmount=100, issueDate=as.Date("2004-11-30"),
+              maturityDate=as.Date("2008-11-30"), redemption=100, 
+              effectiveDate=as.Date("2004-11-30"))
> dateparams <- list(settlementDays=1, calendar="us", dayCounter = 1, period=3, 
+                    businessDayConvention = 4, terminationDateConvention=4,
+                    dateGeneration=1, endOfMonth=1)
> curve <- list(todayDate=as.Date("2004-11-04"), riskFreeRate=0.03)
> rates <- c(0.02875)
>                        
> print(FixedRateBond(bond, rates, curve, dateparams))
Concise summary of valuation for FixedRateBond 
 Net present value :  99.10206 
       clean price :  99.317 
       dirty price :  99.317 
    accrued coupon :  0 
             yield :  0.030455 
        cash flows : 
       Date    Amount
 2005-03-31   0.95308
 2005-07-29   0.94521
 2005-11-30   0.97671
 2006-03-31   0.95308
 2006-07-31   0.96096
 2006-11-30   0.96096
 2007-03-30   0.94521
 2007-07-31   0.96884
 2007-11-30   0.96096
 2008-03-31   0.96096
 2008-07-31   0.96096
 2008-11-30   0.96096
 2008-11-30 100.00000
> 
> ## bond.cpp FloatingRateBond, following test-suite/bonds.cpp
> bond <- list(faceAmount=100, issueDate=as.Date("2004-11-30"),
+              maturityDate=as.Date("2008-11-30"), redemption=100, 
+              effectiveDate=as.Date("2004-11-30"))
> dateparams <- list(settlementDays=1, calendar="us", dayCounter = 1, period=3, 
+                    businessDayConvention = 1, terminationDateConvention=1,
+                    dateGeneration=0, endOfMonth=0, fixingDays = 1)
> gearings <- c()
> spreads <- c()
> caps <- c()
> floors <- c()
> length2 <- list(todayDate=as.Date("2004-11-22"), riskFreeRate=0.025)
> curve <- length2
> termstructure <- length2
> iborindex <- list(type="USDLibor", length=6, 
+                   inTermOf="Month", term=termstructure)                      
> print(FloatingRateBond(bond, gearings, spreads, caps, floors, 
+                  iborindex, curve, dateparams))
Concise summary of valuation for FloatingRateBond 
 Net present value :  99.8126 
       clean price :  99.868 
       dirty price :  99.868 
    accrued coupon :  0 
             yield :  0.025315 
        cash flows : 
       Date    Amount
 2005-03-30   0.82535
 2005-07-29   0.83232
 2005-11-30   0.85292
 2006-03-30   0.82535
 2006-07-31   0.84607
 2006-11-30   0.83917
 2007-03-30   0.82541
 2007-07-30   0.83911
 2007-11-30   0.84613
 2008-03-31   0.83911
 2008-07-30   0.83226
 2008-11-28   0.83232
 2008-11-28 100.00000
> 
> 
